import os
import asyncio
from dotenv import load_dotenv
from uuid import uuid4
from openai import OpenAI
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    InlineQueryHandler, CallbackContext, filters
)
from telegram.constants import ChatAction

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = f"https://ablgpt.onrender.com/{TELEGRAM_TOKEN}"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API —á–µ—Ä–µ–∑ OpenAI SDK
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
    default_headers={
        "HTTP-Referer": "https://ablgpt.onrender.com",
        "X-Title": "AblGpt"
    }
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
user_chat_history = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø AblGpt –Ω–∞ –±–∞–∑–µ OpenRouter. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
def get_gpt_response(user_id: int, user_message: str) -> str:
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
        chat_history = user_chat_history.get(user_id, [])
        chat_history.append({"role": "user", "content": user_message})

        response = client.chat.completions.create(
            model="openai/gpt-3.5-turbo",  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–µ—Ä–µ–∑ OpenRouter
            messages=chat_history
        )

        bot_reply = response.choices[0].message.content.strip()
        chat_history.append({"role": "assistant", "content": bot_reply})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        user_chat_history[user_id] = chat_history[-20:]  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π

        return bot_reply
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {e}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_messages(update: Update, context: CallbackContext):
    if not update.message or not update.message.text:
        return

    user_id = update.message.from_user.id
    user_message = update.message.text.strip()

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(1)

    bot_reply = await asyncio.to_thread(get_gpt_response, user_id, user_message)
    await update.message.reply_text(bot_reply)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
async def reset(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_chat_history[user_id] = []
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
async def mention_handler(update: Update, context: CallbackContext):
    message = update.message
    if not message or not message.text:
        return

    bot_username = context.bot.username
    if f"@{bot_username}" in message.text:
        await message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –¢—ã –º–µ–Ω—è –∑–≤–∞–ª? üòä")

# Inline-—Ä–µ–∂–∏–º
async def inline_query(update: Update, context: CallbackContext):
    query = update.inline_query.query
    if not query:
        return

    try:
        gpt_response = await asyncio.to_thread(get_gpt_response, update.inline_query.from_user.id, query)
        result = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–û—Ç–≤–µ—Ç –æ—Ç GPT",
                input_message_content=InputTextMessageContent(gpt_response)
            )
        ]
        await update.inline_query.answer(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ inline_query: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, mention_handler))
    app.add_handler(InlineQueryHandler(inline_query))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    try:
        app.run_webhook(
            listen="0.0.0.0",
            port=8443,
            url_path=TELEGRAM_TOKEN,
            webhook_url=WEBHOOK_URL
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    main()
