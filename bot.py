from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, InlineQueryHandler, filters, CallbackContext
from openai import OpenAI
import psycopg2
import asyncio
import os
from dotenv import load_dotenv
from uuid import uuid4

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

DB_PARAMS = {
    "dbname": "AblGpt",
    "user": "postgres",
    "host": "localhost",
    "port": "5432"
}

client = OpenAI(api_key=OPENAI_API_KEY)
CREATOR_NAME = "–ê–±—ã–ª–∞–π"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
def save_message(user_id, username, message, role):
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        cur = conn.cursor()
        cur.execute("INSERT INTO messages (user_id, username, message, role) VALUES (%s, %s, %s, %s)",
                    (user_id, username, message, role))
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
def get_chat_history(user_id, limit=5):
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        cur = conn.cursor()
        cur.execute("""
            SELECT role, message FROM messages 
            WHERE user_id = %s 
            ORDER BY id DESC 
            LIMIT %s
        """, (user_id, limit))
        messages = cur.fetchall()
        cur.close()
        conn.close()

        history = [{"role": role, "content": text} for role, text in reversed(messages)]
        return history
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        return []

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def cleanup_old_messages(user_id, max_messages=50):
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        cur = conn.cursor()
        cur.execute("""
            DELETE FROM messages 
            WHERE user_id = %s 
            AND id NOT IN (
                SELECT id FROM messages 
                WHERE user_id = %s 
                ORDER BY id DESC 
                LIMIT %s
            )
        """, (user_id, user_id, max_messages))
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    save_message(user.id, user.username, "–ö–æ–º–∞–Ω–¥–∞ /start", "user")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø AblGpt. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
def get_gpt_response(user_id, user_message):
    try:
        chat_history = get_chat_history(user_id)
        chat_history.append({"role": "user", "content": user_message})

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=chat_history
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_messages(update: Update, context: CallbackContext):
    if not update.message or not update.message.text:
        return  

    user = update.message.from_user
    user_message = update.message.text
    save_message(user.id, user.username, user_message, "user")
    cleanup_old_messages(user.id)

    if CREATOR_NAME.lower() in user_message.lower():
        bot_reply = f"{CREATOR_NAME} ‚Äî –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! ‚ù§Ô∏è"
    else:
        await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")
        await asyncio.sleep(2)
        bot_reply = get_gpt_response(user.id, user_message)

    save_message(user.id, "AblGpt", bot_reply, "assistant")
    await update.message.reply_text(bot_reply, quote=True, parse_mode="MARKDOWN")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
async def mention_handler(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ."""
    message = update.message
    bot_username = context.bot.username  # –ü–æ–ª—É—á–∞–µ–º @username –±–æ—Ç–∞

    if f"@{bot_username}" in message.text:
        await message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –¢—ã –º–µ–Ω—è –∑–≤–∞–ª? üòä")

# üìå Inline-—Ä–µ–∂–∏–º: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
async def inline_query(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–æ–≥–¥–∞ –ø–∏—à—É—Ç @—Ç–≤–æ–π_–±–æ—Ç –≤ —á–∞—Ç–µ)."""
    query = update.inline_query.query  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ @–±–æ—Ç
    
    if not query:
        return  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    result = [
        InlineQueryResultArticle(
            id=str(uuid4()),
            title="–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞",
            input_message_content=InputTextMessageContent(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {query}")
        )
    ]

    await update.inline_query.answer(result)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
    
    # üÜï –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, mention_handler))

    # üÜï –î–æ–±–∞–≤–ª—è–µ–º inline-–∑–∞–ø—Ä–æ—Å—ã (@username –≤ –ª—é–±–æ–º —á–∞—Ç–µ)
    app.add_handler(InlineQueryHandler(inline_query))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    try:
        app.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    main()
